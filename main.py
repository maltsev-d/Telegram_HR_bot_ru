import asyncio
import logging
from aiogram import Router
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os

from keyboards import yes_no_keyboard, single_button_keyboard, decision_keyboard
from vacancies import get_vacancies
from analytics import init_analytics, update_user_fields
from states import Form
import texts

#–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Reender
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
#-------------------------------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞!")

# –†–æ—É—Ç–µ—Ä
router = Router()

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await state.set_state(Form.choose_vacancy)
    date_now = datetime.now().strftime("%d.%m.%Y %H:%M")

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    logger.warning(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}, ID: {message.from_user.id}")

    await update_user_fields(
        message.from_user.id,
        status="–ù–æ–≤—ã–π",
        full_name=message.from_user.full_name,
        username=message.from_user.username,
        date=date_now
    )

    kb = single_button_keyboard("üîç  –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", "show_vacancies")
    await message.answer(
        texts.START_MESSAGE.format(message.from_user.first_name),
        reply_markup=kb
    )


@router.callback_query(lambda c: c.data == "show_vacancies")
async def show_vacancies(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    vacancies = get_vacancies()
    if not vacancies:
        logger.warning(f"–í–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")

    for v in vacancies:
        kb = single_button_keyboard("üëâ  –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", f"apply_{v['id']}")
        await callback.message.answer(f"*{v['title']}*\n\n{v['description']}", reply_markup=kb)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("apply_"))
async def apply(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
    vacancy_id = callback.data.split("_")[1]
    vacancies = get_vacancies()
    vacancy = next((v for v in vacancies if v["id"] == vacancy_id), None)

    if not vacancy:
        await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await update_user_fields(callback.from_user.id,
                             vacancy=f"{vacancy['title']}",
                             status="–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ"
                             )

    await callback.message.answer(texts.VACANCY_INFO)

    kb = yes_no_keyboard("continue_yes", "continue_no")
    await callback.message.answer(texts.INTEREST_MESSAGE, reply_markup=kb)
    await state.set_state(Form.interest)


@router.callback_query(lambda c: c.data == "continue_no")
async def no_continue(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω"""
    await callback.message.answer(texts.REJECTION_ASK)
    await state.set_state(Form.rejection_reason)


@router.message(Form.rejection_reason)
async def save_reason(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"""
    await update_user_fields(message.from_user.id,
                             reason=message.text,
                             status="–û—Ç–∫–∞–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
                             )

    await message.answer(texts.REJECTION_THANKS)
    await state.clear()


@router.callback_query(lambda c: c.data == "continue_yes")
async def ask_main_thing(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ, –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å—ã"""
    await callback.message.answer(texts.QUESTION_1)
    await state.set_state(Form.question_1)


@router.message(Form.question_1)
async def get_main_thing(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"""
    await update_user_fields(message.from_user.id, important=message.text)
    await message.answer(texts.QUESTION_2)
    await state.set_state(Form.question_2)


@router.message(Form.question_2)
async def process_salary(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π"""
    salary = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π
    try:
        salary_clean = int(salary.replace(' ', '').replace(',', ''))
        #if salary_clean < 10000 or salary_clean > 500000:
        #    raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except ValueError:
        await message.answer(texts.SALARY_ERROR)
        return


    await update_user_fields(message.from_user.id, salary_expectations=salary)
    await state.set_state(Form.interview_invite)
    await interview_invite(message, state)


months_ru = {
    "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞", "April": "–∞–ø—Ä–µ–ª—è", "May": "–º–∞—è", "June": "–∏—é–Ω—è",
    "July": "–∏—é–ª—è",
    "August": "–∞–≤–≥—É—Å—Ç–∞", "September": "—Å–µ–Ω—Ç—è–±—Ä—è", "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è",
}


@router.message(Form.interview_invite)
async def interview_invite(message: Message, state: FSMContext):
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    # –†–∞—Å—á—ë—Ç 48 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
    interview_datetime = datetime.now()
    hours_added = 0
    while hours_added < 48:
        interview_datetime += timedelta(hours=1)
        if interview_datetime.weekday() < 5 and 9 <= interview_datetime.hour < 18:
            hours_added += 1

    interview_date_str = interview_datetime.strftime('%d')
    month_en = interview_datetime.strftime('%B')
    month_ru = months_ru.get(month_en, month_en)
    interview_time = interview_datetime.strftime('%H:%M')

    interview_datetime = interview_datetime.strftime("%d.%m.%Y %H:%M")
    await update_user_fields(message.from_user.id,
                             status="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
                             interview_date=interview_datetime
                             )

    kb = yes_no_keyboard("interview_yes", "interview_no")

    await message.answer(
        texts.INTERVIEW_INVITE.format(
            message.from_user.first_name, interview_date_str, month_ru, interview_time),
        reply_markup=kb
    )
    await state.set_state(Form.interview_invite)


@router.callback_query(lambda c: c.data == "interview_yes")
async def interview_yes(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    await update_user_fields(callback.from_user.id, status="–ò–Ω—Ç–µ—Ä–≤—å—é HR")
    await callback.message.answer(texts.INTERVIEW_ACCEPT)
    await state.clear()


@router.callback_query(lambda c: c.data == "interview_no")
async def interview_no(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫–∞–∑ –æ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é"""
    kb = single_button_keyboard("–ù–∏–∫–æ–≥–¥–∞", "never")
    await callback.message.answer(texts.INTERVIEW_REJECT, reply_markup=kb)
    await state.set_state(Form.reschedule)


@router.message(Form.reschedule)
async def process_reschedule(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    await update_user_fields(message.from_user.id,
                             status="C–≤—è–∑–∞—Ç—å—Å—è",
                             desired_interview_time=message.text
                             )

    await message.answer(texts.RESCHEDULE_THANKS)
    await state.clear()


@router.callback_query(lambda c: c.data == "never")
async def never_reason(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫–∞–∑ –æ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞–≤—Å–µ–≥–¥–∞"""
    await callback.message.answer(texts.NEVER_REASON)
    await state.set_state(Form.refusal_reason)


@router.message(Form.refusal_reason)
async def process_refusal_reason(message: Message, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–∞–∑–∞ –æ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é"""
    await update_user_fields(message.from_user.id,
                             status="–û—Ç–∫–∞–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
                             refusal_reason=message.text
                             )

    await message.answer(texts.REFUSAL_THANKS)
    await state.clear()


@router.message(lambda m: m.text.startswith("/evaluate"))
async def evaluate_candidate(message: Message):
    """–û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer(texts.EVALUATE_ERROR, parse_mode=None)
        return

    user_id = int(parts[1])
    kb = decision_keyboard(user_id)
    await message.answer(f"üîç –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —Å ID {user_id}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:",
                         reply_markup=kb)


@router.callback_query(F.data.startswith("decision_accept_"))
async def accept_candidate(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—è—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    user_id = callback.data.split("_")[2]
    await update_user_fields(user_id, status="–ü—Ä–∏–Ω—è—Ç")
    await bot.send_message(
        chat_id=user_id,
        text=texts.ACCEPT_CANDIDATE
    )
    await callback.message.answer(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç {user_id} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ.")
    await callback.answer()



@router.callback_query(F.data.startswith("decision_reject_"))
async def reject_candidate(callback: CallbackQuery, state: FSMContext):
    user_id = callback.data.split("_")[2]
    await state.set_state(Form.rejection_reason_final)
    await state.update_data(user_id=user_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:")
    await callback.answer()

@router.message(Form.rejection_reason_final)
async def save_final_rejection(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–∞–∑"""
    data = await state.get_data()
    user_id = data.get("user_id")
    reason = message.text.strip()

    await update_user_fields(
        user_id,
        status="–ù–µ–ø—Ä–∏–Ω—è—Ç",
        final_rejection_reason=reason
    )

    await bot.send_message(
        chat_id=user_id,
        text=texts.REJECTION_FINAL
    )

    await message.answer(f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç—É {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ.")
    await state.clear()

"""–í—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
@router.message(Command("download"))
async def send_csv(message: types.Message):
    file_path = "data/analytics.csv"
    try:
        document = FSInputFile(file_path, filename="analytics.csv")
        await message.answer_document(document, caption="–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üìä")
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")

@router.message(Command("vacancies"))
async def show_vacancies_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è HR: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    vacancies = get_vacancies()
    if not vacancies:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return

    for v in vacancies:
        await message.answer(f"*{v['title']}*\n\n{v['description']}")


"""–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
async def main():
    init_analytics()
    await dp.start_polling(bot)

# --- –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render, —á—Ç–æ–±—ã –æ–Ω –≤–∏–¥–µ–ª –ø–æ—Ä—Ç ---
def run_http():
    import os
    from http.server import HTTPServer, BaseHTTPRequestHandler

    port = int(os.environ.get("PORT", 8000))  # Render –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç PORT
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"HR Bot is alive üöÄ")

    httpd = HTTPServer(('0.0.0.0', port), Handler)
    httpd.serve_forever()

import threading
threading.Thread(target=run_http, daemon=True).start()
# --------------------------------------------------

if __name__ == "__main__":
    asyncio.run(main())

